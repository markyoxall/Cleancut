@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="navbar-nav">
    <AuthorizeView>
        <Authorized>
<div class="nav-item dropdown">
  <a class="nav-link dropdown-toggle text-light" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
     <i class="fas fa-user me-2"></i>
  Hello, @GetUserName(context.User)!
        </a>
     <ul class="dropdown-menu">
         <li>
               <span class="dropdown-item-text">
 <small class="text-muted">@GetUserEmail(context.User)</small>
               </span>
           </li>
     <li><hr class="dropdown-divider"></li>
            <li>
           <button class="dropdown-item" @onclick="Logout">
   <i class="fas fa-sign-out-alt me-2"></i>
     Logout
       </button>
       </li>
         </ul>
       </div>
        </Authorized>
        <NotAuthorized>
   <div class="nav-item">
       <a class="nav-link text-light" href="/Account/Login">
   <i class="fas fa-sign-in-alt me-2"></i>
           Login
           </a>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private async Task Logout()
    {
        Navigation.NavigateTo("/Account/Logout", forceLoad: true);
    }

    private string GetUserName(ClaimsPrincipal user)
    {
        return user.FindFirst("name")?.Value 
        ?? user.FindFirst(ClaimTypes.Name)?.Value 
        ?? user.FindFirst("preferred_username")?.Value 
?? "User";
}

    private string GetUserEmail(ClaimsPrincipal user)
    {
    return user.FindFirst(ClaimTypes.Email)?.Value 
     ?? user.FindFirst("email")?.Value 
       ?? "No email";
    }
}