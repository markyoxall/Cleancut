@page "/token-inspector"
@using CleanCut.BlazorWebApp.Services.Auth
@using System.Text.Json
@using System.Text
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject ITokenService TokenService
@inject ILogger<TokenInspector> Logger
@inject IJSRuntime JSRuntime

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Token Inspector - CleanCut</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
       <h1 class="display-6 fw-bold text-primary">
        <i class="fas fa-search me-2"></i>Token Inspector
       </h1>
            <p class="text-muted">Examine JWT tokens and their contents in detail</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
    <div class="card">
    <div class="card-header">
               <h5 class="card-title mb-0">
          <i class="fas fa-key me-2"></i>Current Token Analysis
         </h5>
         </div>
<div class="card-body">
  <button class="btn btn-primary me-2" @onclick="LoadCurrentToken" disabled="@isLoading">
       @if (isLoading)
        {
      <span class="spinner-border spinner-border-sm me-2" role="status"></span>
    }
   else
        {
     <i class="fas fa-sync-alt me-2"></i>
             }
            Refresh Token
       </button>
        <button class="btn btn-secondary me-2" @onclick="CopyTokenToClipboard" disabled="@(string.IsNullOrEmpty(currentToken))">
               <i class="fas fa-copy me-2"></i>Copy Token
         </button>
  <button class="btn btn-info" @onclick="OpenJwtDecoder" disabled="@(string.IsNullOrEmpty(currentToken))">
  <i class="fas fa-external-link-alt me-2"></i>Open in JWT.io
     </button>
             </div>
            </div>
  </div>
    </div>

    @if (!string.IsNullOrEmpty(currentToken))
    {
 <div class="row mb-4">
 <div class="col-12">
        <div class="card">
     <div class="card-header">
     <h5 class="card-title mb-0">
         <i class="fas fa-info-circle me-2"></i>Token Overview
       </h5>
          </div>
    <div class="card-body">
           <div class="row">
   <div class="col-md-6">
    <strong>Token Length:</strong> @currentToken.Length characters<br/>
       <strong>Created:</strong> @tokenCreatedAt.ToString("yyyy-MM-dd HH:mm:ss UTC")<br/>
   <strong>Expires:</strong> @(tokenExpiry?.ToString("yyyy-MM-dd HH:mm:ss UTC") ?? "Not specified")<br/>
      <strong>Status:</strong> 
     @if (tokenExpiry.HasValue)
         {
var timeRemaining = tokenExpiry.Value - DateTime.UtcNow;
  if (timeRemaining.TotalMinutes > 5)
      {
      <span class="badge bg-success">Valid (@((int)timeRemaining.TotalMinutes) minutes remaining)</span>
            }
   else if (timeRemaining.TotalSeconds > 0)
       {
           <span class="badge bg-warning">Expiring soon (@((int)timeRemaining.TotalMinutes) minutes remaining)</span>
           }
       else
            {
     <span class="badge bg-danger">Expired</span>
           }
       }
        else
      {
      <span class="badge bg-secondary">Unknown</span>
          }
     </div>
          <div class="col-md-6">
    <strong>Audience:</strong> @string.Join(", ", audiences)<br/>
       <strong>Issuer:</strong> @issuer<br/>
     <strong>Subject:</strong> @subject<br/>
       <strong>Client ID:</strong> @clientId
              </div>
        </div>
     </div>
                </div>
        </div>
    </div>

        <div class="row mb-4">
     <div class="col-md-6">
     <div class="card">
            <div class="card-header">
   <h6 class="card-title mb-0">
     <i class="fas fa-file-code me-2"></i>JWT Header
  </h6>
     </div>
<div class="card-body">
   <pre style="background-color: #f8f9fa; padding: 1rem; border-radius: 0.375rem; white-space: pre-wrap; font-family: 'Courier New', monospace; font-size: 0.875rem; max-height: 300px; overflow-y: auto;">@headerJson</pre>
 </div>
    </div>
   </div>
       <div class="col-md-6">
         <div class="card">
   <div class="card-header">
                <h6 class="card-title mb-0">
           <i class="fas fa-file-alt me-2"></i>JWT Payload
            </h6>
        </div>
      <div class="card-body">
             <pre style="background-color: #f8f9fa; padding: 1rem; border-radius: 0.375rem; white-space: pre-wrap; font-family: 'Courier New', monospace; font-size: 0.875rem; max-height: 300px; overflow-y: auto;">@payloadJson</pre>
         </div>
         </div>
  </div>
        </div>

     <div class="row mb-4">
    <div class="col-12">
           <div class="card">
              <div class="card-header">
<h6 class="card-title mb-0">
                <i class="fas fa-list me-2"></i>Claims
      </h6>
    </div>
        <div class="card-body">
       @if (claims.Any())
            {
 <div class="table-responsive">
   <table class="table table-striped table-sm">
  <thead>
  <tr>
          <th>Type</th>
        <th>Value</th>
  </tr>
       </thead>
           <tbody>
            @foreach (var claim in claims.OrderBy(c => c.Type))
       {
  <tr>
       <td><code>@claim.Type</code></td>
       <td>@claim.Value</td>
    </tr>
           }
    </tbody>
      </table>
       </div>
      }
       else
      {
           <p class="text-muted">No claims found in token</p>
        }
   </div>
     </div>
    </div>
     </div>

        <div class="row mb-4">
     <div class="col-12">
      <div class="card">
   <div class="card-header">
 <h6 class="card-title mb-0">
     <i class="fas fa-code me-2"></i>Raw Token
      </h6>
 </div>
     <div class="card-body">
  <div class="alert alert-info" role="alert">
     <i class="fas fa-info-circle me-2"></i>
  This is the actual Bearer token that gets sent to your API in the Authorization header
       </div>
        <textarea class="form-control" rows="6" readonly style="font-family: 'Courier New', monospace; font-size: 0.875rem; word-break: break-all;">@currentToken</textarea>
            </div>
            </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row mb-4">
 <div class="col-12">
        <div class="alert alert-danger" role="alert">
         <i class="fas fa-exclamation-triangle me-2"></i>
         <strong>Error:</strong> @errorMessage
            </div>
        </div>
        </div>
    }
</div>

@code {
    private string currentToken = "";
    private string errorMessage = "";
  private bool isLoading = false;
    private DateTime tokenCreatedAt;
    private DateTime? tokenExpiry;
    private string headerJson = "";
    private string payloadJson = "";
    private List<Claim> claims = new();
    private string issuer = "";
    private string subject = "";
    private string clientId = "";
    private List<string> audiences = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentToken();
 }

    private async Task LoadCurrentToken()
    {
        isLoading = true;
      errorMessage = "";
        StateHasChanged();

      try
        {
         Logger.LogInformation("Loading current access token for inspection");
   tokenCreatedAt = DateTime.UtcNow;
            
   currentToken = await TokenService.GetAccessTokenAsync() ?? "";
            
            if (!string.IsNullOrEmpty(currentToken))
            {
  await ParseJwtToken(currentToken);
     Logger.LogInformation("Successfully loaded and parsed token");
            }
       else
            {
         errorMessage = "Failed to retrieve access token";
      Logger.LogWarning("No access token available");
    }
 }
        catch (Exception ex)
        {
    errorMessage = $"Error loading token: {ex.Message}";
            Logger.LogError(ex, "Error loading current token");
        }
        finally
    {
            isLoading = false;
    StateHasChanged();
    }
 }

    private async Task ParseJwtToken(string token)
    {
        try
        {
   var handler = new JwtSecurityTokenHandler();
 var jsonToken = handler.ReadJwtToken(token);

// Parse header
        var headerObject = new Dictionary<string, object>();
   foreach (var header in jsonToken.Header)
    {
       headerObject[header.Key] = header.Value;
    }
         headerJson = JsonSerializer.Serialize(headerObject, new JsonSerializerOptions { WriteIndented = true });

     // Parse payload
         var payloadObject = new Dictionary<string, object>();
   foreach (var claim in jsonToken.Claims)
         {
           if (payloadObject.ContainsKey(claim.Type))
        {
  // Handle multiple values for the same claim type
 if (payloadObject[claim.Type] is List<object> list)
   {
list.Add(claim.Value);
       }
         else
             {
    payloadObject[claim.Type] = new List<object> { payloadObject[claim.Type], claim.Value };
       }
     }
                else
        {
       payloadObject[claim.Type] = claim.Value;
         }
            }
      payloadJson = JsonSerializer.Serialize(payloadObject, new JsonSerializerOptions { WriteIndented = true });

     // Extract key information
            claims = jsonToken.Claims.ToList();
      issuer = jsonToken.Issuer ?? "";
   subject = jsonToken.Subject ?? "";
     audiences = jsonToken.Audiences?.ToList() ?? new List<string>();
            
     // Try to find client_id
 clientId = jsonToken.Claims.FirstOrDefault(c => c.Type == "client_id")?.Value ?? "";
          
            // Get expiry
  if (jsonToken.ValidTo != DateTime.MinValue)
            {
     tokenExpiry = jsonToken.ValidTo;
          }

     Logger.LogDebug("Successfully parsed JWT token with {ClaimCount} claims", claims.Count);
        }
     catch (Exception ex)
   {
  errorMessage = $"Error parsing JWT token: {ex.Message}";
            Logger.LogError(ex, "Error parsing JWT token");
  }
    }

    private async Task CopyTokenToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", currentToken);
        // Could add a toast notification here
            Logger.LogInformation("Token copied to clipboard");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error copying token to clipboard");
 }
    }

    private async Task OpenJwtDecoder()
    {
        try
        {
    var url = $"https://jwt.io/#debugger-io?token={currentToken}";
          await JSRuntime.InvokeVoidAsync("window.open", url, "_blank");
    Logger.LogInformation("Opened JWT decoder in new tab");
        }
        catch (Exception ex)
        {
   Logger.LogError(ex, "Error opening JWT decoder");
        }
 }
}