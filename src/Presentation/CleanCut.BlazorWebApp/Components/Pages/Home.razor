@page "/"
@using CleanCut.Application.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@implements IDisposable
@inject ILogger<Home> Logger
@inject NavigationManager Navigation
@inject ICustomersState CustomersState
@inject IProductsState ProductsState
@inject ICountriesState CountriesState
@inject IUiStateService UiState
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Dashboard - CleanCut</PageTitle>

<div class="container-fluid">
    <!-- Welcome Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-6 fw-bold text-primary">
                        <i class="fas fa-tachometer-alt me-2"></i>Dashboard
                    </h1>
                    <AuthorizeView>
                        <Authorized>
                            <p class="text-muted">Welcome back, @GetUserName(context.User)!</p>
                        </Authorized>
                        <NotAuthorized>
                            <p class="text-muted">Welcome to CleanCut Management System</p>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
                <div class="text-end">
                    <small class="text-muted">Last updated: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")</small>
                    <AuthorizeView>
                        <Authorized>
                            <br><small class="text-success"><i class="fas fa-lock me-1"></i>Authenticated</small>
                        </Authorized>
                        <NotAuthorized>
                            <br><small class="text-warning"><i class="fas fa-unlock me-1"></i>Not Authenticated</small>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border spinner-border-lg" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading dashboard...</p>
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(UiState.CurrentMessage))
        {
            <div class="alert @(UiState.IsSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                <i class="fas @(UiState.IsSuccess ? "fa-check-circle" : "fa-exclamation-circle")"></i> @UiState.CurrentMessage
                <button type="button" class="btn-close" @onclick="UiState.ClearMessage"></button>
            </div>
        }

        <!-- Authentication Status Card -->
        <AuthorizeView>
            <Authorized>
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card border-0 shadow-sm border-success">
                            <div class="card-body bg-light-success">
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0">
                                        <div class="rounded-circle bg-success p-3">
                                            <i class="fas fa-shield-alt fa-lg text-white"></i>
                                        </div>
                                    </div>
                                    <div class="flex-grow-1 ms-3">
                                        <h5 class="mb-1 text-success">Authentication Status: Active</h5>
                                        <p class="mb-1">You are successfully authenticated and can access all API features.</p>
                                        <small class="text-muted">User: @GetUserEmail(context.User) • Logged in at @DateTime.Now.ToString("HH:mm")</small>
                                    </div>
                                    <div class="flex-shrink-0">
                                        <span class="badge bg-success fs-6">
                                            <i class="fas fa-check me-1"></i>Connected
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card border-0 shadow-sm border-warning">
                            <div class="card-body bg-light-warning">
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0">
                                        <div class="rounded-circle bg-warning p-3">
                                            <i class="fas fa-exclamation-triangle fa-lg text-white"></i>
                                        </div>
                                    </div>
                                    <div class="flex-grow-1 ms-3">
                                        <h5 class="mb-1 text-warning">Authentication Required</h5>
                                        <p class="mb-1">Please log in to access API features and manage your data.</p>
                                        <small class="text-muted">You'll be redirected to IdentityServer for secure authentication.</small>
                                    </div>
                                    <div class="flex-shrink-0">
                                        <a href="/Account/Login" class="btn btn-warning">
                                            <i class="fas fa-sign-in-alt me-2"></i>Login
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-6 col-xl-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="rounded-circle bg-primary p-3">
                                    <i class="fas fa-users fa-lg text-white"></i>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fw-bold text-primary fs-4">@TotalCustomers</div>
                                <div class="text-muted">Total Customers</div>
                                <small class="text-success">
                                    <i class="fas fa-user-check me-1"></i>@ActiveCustomers Active
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-xl-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="rounded-circle bg-success p-3">
                                    <i class="fas fa-box fa-lg text-white"></i>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fw-bold text-success fs-4">@TotalProducts</div>
                                <div class="text-muted">Total Products</div>
                                <small class="text-success">
                                    <i class="fas fa-check me-1"></i>@AvailableProducts Available
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-xl-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="rounded-circle bg-info p-3">
                                    <i class="fas fa-dollar-sign fa-lg text-white"></i>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fw-bold text-info fs-4">@TotalValue.ToString("C0")</div>
                                <div class="text-muted">Total Value</div>
                                <small class="text-info">
                                    <i class="fas fa-chart-line me-1"></i>Portfolio Value
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-xl-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="rounded-circle bg-warning p-3">
                                    <i class="fas fa-chart-bar fa-lg text-white"></i>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fw-bold text-warning fs-4">@AverageProductsPerCustomer.ToString("F1")</div>
                                <div class="text-muted">Avg Products/Customer</div>
                                <small class="text-warning">
                                    <i class="fas fa-calculator me-1"></i>Performance
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-rocket me-2"></i>Quick Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6 col-lg-3">
                                <button type="button" class="btn btn-primary w-100 p-3" @onclick="NavigateToCreateCustomer">
                                    <i class="fas fa-user-plus fa-2x d-block mb-2"></i>
                                    <span class="fw-bold">Add Customer</span>
                                </button>
                            </div>
                            <div class="col-md-6 col-lg-3">
                                <button type="button" class="btn btn-success w-100 p-3" @onclick="NavigateToCreateProduct">
                                    <i class="fas fa-plus-circle fa-2x d-block mb-2"></i>
                                    <span class="fw-bold">Add Product</span>
                                </button>
                            </div>
                            <div class="col-md-6 col-lg-3">
                                <button type="button" class="btn btn-info w-100 p-3" @onclick="NavigateToManageCustomers">
                                    <i class="fas fa-users fa-2x d-block mb-2"></i>
                                    <span class="fw-bold">Manage Customers</span>
                                </button>
                            </div>
                            <div class="col-md-6 col-lg-3">
                                <button type="button" class="btn btn-warning w-100 p-3" @onclick="NavigateToManageProducts">
                                    <i class="fas fa-box fa-2x d-block mb-2"></i>
                                    <span class="fw-bold">Manage Products</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="row">
            <div class="col-lg-8 mb-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-history me-2"></i>Recent Products
                        </h5>
                        <button type="button" class="btn btn-sm btn-outline-primary"
                                @onclick="NavigateToAllProducts">
                            View All
                        </button>
                    </div>
                    <div class="card-body">
                        @if (RecentProducts.Any())
                        {
                            @foreach (var product in RecentProducts.Take(5))
                            {
                                <div class="d-flex align-items-center py-2 border-bottom">
                                    <div class="avatar-small me-3">
                                        <i class="fas fa-box"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-bold">@product.Name</div>
                                        <small class="text-muted">by @(product.Customer?.FirstName ?? "Unknown") • @product.CreatedAt.ToString("MMM dd")</small>
                                    </div>
                                    <div class="text-success fw-bold">@product.Price.ToString("C")</div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="fas fa-box fa-2x text-muted mb-2"></i>
                                <p class="text-muted">No products yet</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-4 mb-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-users me-2"></i>Active Customers
                        </h5>
                        <button type="button" class="btn btn-sm btn-outline-info"
                                @onclick="NavigateToAllCustomers">
                            View All
                        </button>
                    </div>
                    <div class="card-body">
                        @if (ActiveCustomersList.Any())
                        {
                            @foreach (var customer in ActiveCustomersList.Take(5))
                            {
                                <div class="d-flex align-items-center py-2">
                                    <div class="avatar-small-customer me-3">
                                        @customer.FirstName.Substring(0, 1).ToUpper()
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-bold">@customer.FirstName @customer.LastName</div>
                                        <small class="text-muted">@customer.Email</small>
                                    </div>
                                    <div class="text-success">
                                        <i class="fas fa-check-circle"></i>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="fas fa-users fa-2x text-muted mb-2"></i>
                                <p class="text-muted">No active customers</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .avatar-small {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #28a745;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }

    .avatar-small-customer {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #0d6efd;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }

    .bg-light-success {
        background-color: rgba(40, 167, 69, 0.1) !important;
    }

    .bg-light-warning {
        background-color: rgba(255, 193, 7, 0.1) !important;
    }
</style>

@code {
    private bool IsLoading => (UiState != null) ? UiState.IsLoading : (CustomersState.IsLoading || ProductsState.IsLoading || CountriesState.IsLoading);
    private List<CustomerInfo> Customers => CustomersState?.Customers?.ToList() ?? new();
    private List<ProductInfo> Products => ProductsState?.Products?.ToList() ?? new();

    private int TotalCustomers => Customers.Count;
    private int ActiveCustomers => Customers.Count(c => c.IsActive);
    private int TotalProducts => Products.Count;
    private int AvailableProducts => Products.Count(p => p.IsAvailable);
    private decimal TotalValue => Products.Sum(p => p.Price);
    private double AverageProductsPerCustomer => TotalCustomers > 0 ? (double)TotalProducts / TotalCustomers : 0;

    private List<ProductInfo> RecentProducts => Products.OrderByDescending(p => p.CreatedAt).ToList();
    private List<CustomerInfo> ActiveCustomersList => Customers.Where(c => c.IsActive).OrderByDescending(c => c.CreatedAt).ToList();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to feature events
        CustomersState.CustomersChanged += OnCustomersChanged;
        ProductsState.ProductsChanged += OnProductsChanged;
        CountriesState.CountriesChanged += OnCountriesChanged;

        CustomersState.MessageChanged += OnFeatureMessage;
        ProductsState.MessageChanged += OnFeatureMessage;
        CountriesState.MessageChanged += OnFeatureMessage;

        // Subscribe to global UI messages
        if (UiState != null)
            UiState.MessageChanged += OnUiMessage;

        await LoadDashboardDataAsync();
    }

    private void OnCustomersChanged(List<CustomerInfo> customers) => InvokeAsync(StateHasChanged);
    private void OnProductsChanged(List<ProductInfo> products) => InvokeAsync(StateHasChanged);
    private void OnCountriesChanged(List<CountryInfo> countries) => InvokeAsync(StateHasChanged);

    private void OnFeatureMessage(string message, bool isSuccess)
    {
        // Mirror feature messages into the global UI service so UI is consistent
        UiState?.SetMessage(message, isSuccess);
    }

    private void OnUiMessage(string message, bool isSuccess)
    {
        // UI service raised a message — refresh UI
        InvokeAsync(StateHasChanged);
    }

    private void ClearPageMessage()
    {
        UiState?.ClearMessage();
    }

    public void Dispose()
    {
        CustomersState.CustomersChanged -= OnCustomersChanged;
        ProductsState.ProductsChanged -= OnProductsChanged;
        CountriesState.CountriesChanged -= OnCountriesChanged;

        CustomersState.MessageChanged -= OnFeatureMessage;
        ProductsState.MessageChanged -= OnFeatureMessage;
        CountriesState.MessageChanged -= OnFeatureMessage;

        if (UiState != null)
            UiState.MessageChanged -= OnUiMessage;
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            // Add timeout and error handling
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));

            // Try to load data with timeout
            try
            {
                await CustomersState.LoadAsync(cancellationToken: cts.Token);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load customers");
                UiState?.SetMessage("Could not load customers - API may be unavailable", false);
            }

            try
            {
                await ProductsState.LoadAllAsync(cancellationToken: cts.Token);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load products");
                UiState?.SetMessage("Could not load products - API may be unavailable", false);
            }

            try
            {
                await CountriesState.LoadAsync(cancellationToken: cts.Token);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load countries");
                UiState?.SetMessage("Could not load countries - API may be unavailable", false);
            }

            Logger.LogInformation("Dashboard loaded - {CustomerCount} customers, {ProductCount} products",
                CustomersState.Customers.Count,
                ProductsState.Products.Count);

            // Only show success if we loaded some data
            if (CustomersState.Customers.Any() || ProductsState.Products.Any())
            {
                UiState?.SetMessage("Dashboard loaded successfully", true);
            }
            else
            {
                UiState?.SetMessage("Dashboard loaded but no data available - check API connectivity", false);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
            UiState?.SetMessage("Failed to load dashboard data - check Service Status page", false);
        }
        finally
        {
            InvokeAsync(StateHasChanged);
        }
    }

    // Authentication helper methods
    private string GetUserName(ClaimsPrincipal user)
    {
        return user.FindFirst("name")?.Value
            ?? user.FindFirst(ClaimTypes.Name)?.Value
            ?? user.FindFirst("preferred_username")?.Value
          ?? "User";
}

    private string GetUserEmail(ClaimsPrincipal user)
    {
        return user.FindFirst(ClaimTypes.Email)?.Value
            ?? user.FindFirst("email")?.Value
    ?? "No email";
    }

    // Navigation methods
    private void NavigateToCreateCustomer() => Navigation.NavigateTo("/customers/create");
    private void NavigateToCreateProduct() => Navigation.NavigateTo("/products/create");
    private void NavigateToManageCustomers() => Navigation.NavigateTo("/customers/management");
    private void NavigateToManageProducts() => Navigation.NavigateTo("/products/management");
    private void NavigateToAllProducts() => Navigation.NavigateTo("/products/management");
    private void NavigateToAllCustomers() => Navigation.NavigateTo("/customers/management");
}