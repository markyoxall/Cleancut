@page "/"
@using CleanCut.Application.DTOs
@implements IDisposable
@inject ILogger<Home> Logger
@inject NavigationManager Navigation
@inject ICustomersState CustomersState
@inject IProductsState ProductsState
@inject ICountriesState CountriesState
@inject IUiStateService UiState

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Dashboard - CleanCut</PageTitle>

<div class="container-fluid">
    <!-- Welcome Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-6 fw-bold text-primary">
                        <i class="fas fa-tachometer-alt me-2"></i>Dashboard
                    </h1>
                    <p class="text-muted">Welcome to CleanCut Management System</p>
                </div>
                <div class="text-end">
                    <small class="text-muted">Last updated: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions for Demo -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-rocket me-2"></i>Quick Tests
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6 col-lg-3">
                            <button type="button" class="btn btn-primary w-100 p-3" @onclick="NavigateToProducts">
                                <i class="fas fa-search fa-2x d-block mb-2"></i>
                                <span class="fw-bold">Test Product Search</span>
                                <small class="d-block text-light">(Simplified)</small>
                            </button>
                        </div>
                        <div class="col-md-6 col-lg-3">
                            <button type="button" class="btn btn-success w-100 p-3" @onclick="OpenSwagger">
                                <i class="fas fa-code fa-2x d-block mb-2"></i>
                                <span class="fw-bold">API Documentation</span>
                                <small class="d-block text-light">(Swagger UI)</small>
                            </button>
                        </div>
                        <div class="col-md-6 col-lg-3">
                            <button type="button" class="btn btn-info w-100 p-3" @onclick="TestApiCall">
                                <i class="fas fa-rocket fa-2x d-block mb-2"></i>
                                <span class="fw-bold">Test API Call</span>
                                <small class="d-block text-light">(With Token)</small>
                            </button>
                        </div>
                        <div class="col-md-6 col-lg-3">
                            <button type="button" class="btn btn-warning w-100 p-3" @onclick="LoadDashboardDataAsync">
                                <i class="fas fa-sync fa-2x d-block mb-2"></i>
                                <span class="fw-bold">Load Dashboard</span>
                                <small class="d-block text-light">(All Data)</small>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(testResult))
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert @(testSuccess ? "alert-success" : "alert-danger")">
                    <h5>Test Result:</h5>
                    <p>@testResult</p>
                </div>
            </div>
        </div>
    }

    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border spinner-border-lg" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading dashboard...</p>
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(UiState.CurrentMessage))
        {
            <div class="alert @(UiState.IsSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                <i class="fas @(UiState.IsSuccess ? "fa-check-circle" : "fa-exclamation-circle")"></i> @UiState.CurrentMessage
                <button type="button" class="btn-close" @onclick="UiState.ClearMessage"></button>
            </div>
        }

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-6 col-xl-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="rounded-circle bg-primary p-3">
                                    <i class="fas fa-users fa-lg text-white"></i>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fw-bold text-primary fs-4">@TotalCustomers</div>
                                <div class="text-muted">Total Customers</div>
                                <small class="text-success">
                                    <i class="fas fa-user-check me-1"></i>@ActiveCustomers Active
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-xl-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="rounded-circle bg-success p-3">
                                    <i class="fas fa-box fa-lg text-white"></i>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fw-bold text-success fs-4">@TotalProducts</div>
                                <div class="text-muted">Total Products</div>
                                <small class="text-success">
                                    <i class="fas fa-check me-1"></i>@AvailableProducts Available
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-xl-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="rounded-circle bg-info p-3">
                                    <i class="fas fa-dollar-sign fa-lg text-white"></i>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fw-bold text-info fs-4">@TotalValue.ToString("C0")</div>
                                <div class="text-muted">Total Value</div>
                                <small class="text-info">
                                    <i class="fas fa-chart-line me-1"></i>Portfolio Value
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-xl-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="rounded-circle bg-warning p-3">
                                    <i class="fas fa-chart-bar fa-lg text-white"></i>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fw-bold text-warning fs-4">@AverageProductsPerCustomer.ToString("F1")</div>
                                <div class="text-muted">Avg Products/Customer</div>
                                <small class="text-warning">
                                    <i class="fas fa-calculator me-1"></i>Performance
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string testResult = "";
    private bool testSuccess = false;
    private bool IsLoading => (UiState != null) ? UiState.IsLoading : (CustomersState.IsLoading || ProductsState.IsLoading || CountriesState.IsLoading);
    private List<CustomerInfo> Customers => CustomersState?.Customers?.ToList() ?? new();
    private List<ProductInfo> Products => ProductsState?.Products?.ToList() ?? new();

    private int TotalCustomers => Customers.Count;
    private int ActiveCustomers => Customers.Count(c => c.IsActive);
    private int TotalProducts => Products.Count;
    private int AvailableProducts => Products.Count(p => p.IsAvailable);
    private decimal TotalValue => Products.Sum(p => p.Price);
    private double AverageProductsPerCustomer => TotalCustomers > 0 ? (double)TotalProducts / TotalCustomers : 0;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to feature events
        CustomersState.CustomersChanged += OnCustomersChanged;
        ProductsState.ProductsChanged += OnProductsChanged;
        CountriesState.CountriesChanged += OnCountriesChanged;

        CustomersState.MessageChanged += OnFeatureMessage;
        ProductsState.MessageChanged += OnFeatureMessage;
        CountriesState.MessageChanged += OnFeatureMessage;

        // Subscribe to global UI messages
        if (UiState != null)
            UiState.MessageChanged += OnUiMessage;

        // Load dashboard data automatically
        await LoadDashboardDataAsync();
    }

    private void OnCustomersChanged(List<CustomerInfo> customers) => InvokeAsync(StateHasChanged);
    private void OnProductsChanged(List<ProductInfo> products) => InvokeAsync(StateHasChanged);
    private void OnCountriesChanged(List<CountryInfo> countries) => InvokeAsync(StateHasChanged);

    private void OnFeatureMessage(string message, bool isSuccess)
    {
        // Mirror feature messages into the global UI service so UI is consistent
        UiState?.SetMessage(message, isSuccess);
    }

    private void OnUiMessage(string message, bool isSuccess)
    {
        // UI service raised a message — refresh UI
        InvokeAsync(StateHasChanged);
    }

    // Navigation methods
    private void NavigateToProducts() => Navigation.NavigateTo("/products");
    private void OpenSwagger() => Navigation.NavigateTo("https://localhost:7142/swagger", true);

    private async Task TestApiCall()
    {
        try
        {
            testResult = "Testing API call...";
            testSuccess = false;
            StateHasChanged();

            // This would make an actual API call
            await Task.Delay(1000);

            testResult = "API call successful! Your authentication is working.";
            testSuccess = true;
        }
        catch (Exception ex)
        {
            testResult = $"API call failed: {ex.Message}";
            testSuccess = false;
        }
        StateHasChanged();
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            // Add timeout and error handling
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));

            // Try to load data with timeout
            try
            {
                await CustomersState.LoadAsync(cancellationToken: cts.Token);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load customers");
                UiState?.SetMessage("Could not load customers - API may be unavailable", false);
            }

            try
            {
                await ProductsState.LoadAllAsync(cancellationToken: cts.Token);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load products");
                UiState?.SetMessage("Could not load products - API may be unavailable", false);
            }

            try
            {
                await CountriesState.LoadAsync(cancellationToken: cts.Token);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load countries");
                UiState?.SetMessage("Could not load countries - API may be unavailable", false);
            }

            Logger.LogInformation("Dashboard loaded - {CustomerCount} customers, {ProductCount} products",
                CustomersState.Customers.Count,
                ProductsState.Products.Count);

            // Only show success if we loaded some data
            if (CustomersState.Customers.Any() || ProductsState.Products.Any())
            {
                UiState?.SetMessage("Dashboard loaded successfully", true);
            }
            else
            {
                UiState?.SetMessage("Dashboard loaded but no data available - check API connectivity", false);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
            UiState?.SetMessage("Failed to load dashboard data - check Service Status page", false);
        }
        finally
        {
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        CustomersState.CustomersChanged -= OnCustomersChanged;
        ProductsState.ProductsChanged -= OnProductsChanged;
        CountriesState.CountriesChanged -= OnCountriesChanged;

        CustomersState.MessageChanged -= OnFeatureMessage;
        ProductsState.MessageChanged -= OnFeatureMessage;
        CountriesState.MessageChanged -= OnFeatureMessage;

        if (UiState != null)
            UiState.MessageChanged -= OnUiMessage;
    }
}