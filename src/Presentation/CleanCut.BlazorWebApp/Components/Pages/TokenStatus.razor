@page "/token-status"
@using CleanCut.BlazorWebApp.Services.Auth
@inject ITokenService TokenService
@inject ILogger<TokenStatus> Logger

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Token Service Status - CleanCut</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
   <div class="col-12">
     <h1 class="display-6 fw-bold text-primary">
       <i class="fas fa-key me-2"></i>Token Service Status
            </h1>
       <p class="text-muted">Diagnostic information for IdentityServer authentication</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
        <h5 class="card-title mb-0">
                <i class="fas fa-cog me-2"></i>Token Service Test
   </h5>
    </div>
         <div class="card-body">
         <button class="btn btn-primary" @onclick="TestTokenService" disabled="@isLoading">
       @if (isLoading)
  {
      <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            }
         else
                {
            <i class="fas fa-play me-2"></i>
   }
     Test Token Service
    </button>
                </div>
   </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(statusInfo))
    {
        <div class="row">
            <div class="col-12">
  <div class="card">
     <div class="card-header">
         <h5 class="card-title mb-0">
        <i class="fas fa-info-circle me-2"></i>Status Information
         </h5>
  </div>
       <div class="card-body">
   <pre style="background-color: #f8f9fa; padding: 1rem; border-radius: 0.375rem; white-space: pre-wrap; font-family: 'Courier New', monospace; font-size: 0.875rem;">@statusInfo</pre>
          </div>
          </div>
    </div>
 </div>
    }
</div>

@code {
    private string statusInfo = "";
    private bool isLoading = false;

    private async Task TestTokenService()
    {
      isLoading = true;
        statusInfo = "Testing token service...";
        StateHasChanged();

        try
        {
      Logger.LogInformation("Starting token service diagnostic test");
          statusInfo = await TokenService.GetDetailedStatusAsync();
            Logger.LogInformation("Token service diagnostic test completed");
        }
    catch (Exception ex)
        {
     Logger.LogError(ex, "Error during token service test");
            statusInfo = $"Error testing token service: {ex.Message}\n\nStack trace:\n{ex.StackTrace}";
        }
        finally
  {
         isLoading = false;
   StateHasChanged();
   }
    }
}