@page "/api-call-monitor"
@using CleanCut.BlazorWebApp.Services.Auth
@using CleanCut.BlazorWebApp.Services
@inject IApiCallLogService CallLogService
@inject ILogger<ApiCallMonitor> Logger
@implements IDisposable

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>API Call Monitor - CleanCut</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
     <h1 class="display-6 fw-bold text-primary">
  <i class="fas fa-exchange-alt me-2"></i>API Call Monitor
    </h1>
         <p class="text-muted">Monitor HTTP requests to your API and see tokens in action</p>
   </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
         <div class="card-header">
  <h5 class="card-title mb-0">
            <i class="fas fa-cogs me-2"></i>Monitor Controls
   </h5>
              </div>
           <div class="card-body">
       <button class="btn btn-primary me-2" @onclick="RefreshLogs" disabled="@isLoading">
      @if (isLoading)
     {
   <span class="spinner-border spinner-border-sm me-2" role="status"></span>
        }
       else
             {
            <i class="fas fa-sync-alt me-2"></i>
            }
           Refresh
      </button>
       <button class="btn btn-secondary me-2" @onclick="ClearLogs">
    <i class="fas fa-trash me-2"></i>Clear Logs
     </button>
    <button class="btn btn-info me-2" @onclick="ToggleAutoRefresh">
     @if (autoRefresh)
         {
         <text><i class="fas fa-pause me-2"></i>Stop Auto-Refresh</text>
          }
            else
      {
     <text><i class="fas fa-play me-2"></i>Start Auto-Refresh</text>
 }
            </button>
          <span class="text-muted">Total Calls: @logs.Count | Auto-refresh: @(autoRefresh ? "ON" : "OFF")</span>
                </div>
            </div>
        </div>
    </div>

    @if (logs.Any())
    {
        <div class="row">
            <div class="col-12">
        <div class="card">
            <div class="card-header">
          <h5 class="card-title mb-0">
     <i class="fas fa-list me-2"></i>Recent API Calls
   </h5>
            </div>
       <div class="card-body p-0">
        <div class="table-responsive">
       <table class="table table-striped table-sm mb-0">
            <thead class="table-dark">
         <tr>
          <th>Time</th>
         <th>Method</th>
      <th>URL</th>
  <th>Token</th>
         <th>Status</th>
     <th>Duration</th>
     <th>Actions</th>
       </tr>
         </thead>
        <tbody>
        @foreach (var log in logs)
        {
    <tr class="@GetRowClass(log)">
      <td>
           <small>@log.Timestamp.ToString("HH:mm:ss.fff")</small>
    </td>
        <td>
    <span class="badge @GetMethodBadgeClass(log.Method)">@log.Method</span>
            </td>
       <td>
                <small title="@log.Url">
   @if (log.Url.Length > 60)
   {
 @($"{log.Url[..30]}...{log.Url[^20..]}")
       }
 else
        {
            @log.Url
       }
           </small>
         </td>
            <td>
     @if (log.HasToken)
    {
      <i class="fas fa-check text-success me-1" title="Token Present"></i>
     <small>
          @log.TokenPreview
     @if (log.TokenExpiry.HasValue)
    {
         var timeUntilExpiry = log.TokenExpiry.Value - DateTime.UtcNow;
                if (timeUntilExpiry.TotalMinutes > 5)
      {
        <span class="badge bg-success">@((int)timeUntilExpiry.TotalMinutes)m</span>
 }
          else if (timeUntilExpiry.TotalSeconds > 0)
         {
           <span class="badge bg-warning">@((int)timeUntilExpiry.TotalMinutes)m</span>
}
else
           {
       <span class="badge bg-danger">Expired</span>
    }
          }
              </small>
}
            else
   {
 <i class="fas fa-times text-warning me-1" title="No Token"></i>
           <small class="text-muted">None</small>
       }
  </td>
      <td>
     <span class="badge @GetStatusBadgeClass(log.StatusCode)">
  @log.StatusCode
          </span>
   @if (!string.IsNullOrEmpty(log.Error))
        {
   <br/><small class="text-danger">@log.Error</small>
        }
    @if (!string.IsNullOrEmpty(log.AuthError))
          {
     <br/><small class="text-warning">@log.AuthError</small>
          }
         </td>
           <td>
          <small>@((int)log.Duration.TotalMilliseconds)ms</small>
   </td>
     <td>
             <button class="btn btn-sm btn-outline-info" @onclick="() => ShowDetails(log)">
  <i class="fas fa-info-circle"></i>
  </button>
             </td>
          </tr>
         }
    </tbody>
      </table>
  </div>
  </div>
       </div>
    </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
     <div class="alert alert-info" role="alert">
        <i class="fas fa-info-circle me-2"></i>
    No API calls logged yet. Make some API calls to see them appear here.
       </div>
            </div>
        </div>
    }

    @if (selectedLog != null)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
      <div class="modal-dialog modal-lg">
  <div class="modal-content">
        <div class="modal-header">
         <h5 class="modal-title">
               <i class="fas fa-info-circle me-2"></i>Call Details - @selectedLog.RequestId
   </h5>
      <button type="button" class="btn-close" @onclick="CloseDetails"></button>
    </div>
   <div class="modal-body">
 <div class="row mb-3">
    <div class="col-md-6">
        <strong>Timestamp:</strong> @selectedLog.Timestamp.ToString("yyyy-MM-dd HH:mm:ss.fff UTC")<br/>
      <strong>Method:</strong> @selectedLog.Method<br/>
             <strong>Status:</strong> @selectedLog.StatusCode (@(selectedLog.IsSuccess ? "Success" : "Failed"))<br/>
<strong>Duration:</strong> @selectedLog.Duration.TotalMilliseconds ms
      </div>
    <div class="col-md-6">
              <strong>URL:</strong><br/>
<small class="text-break">@selectedLog.Url</small>
         </div>
  </div>

     @if (selectedLog.HasToken)
         {
  <div class="mb-3">
         <h6><i class="fas fa-key me-2"></i>Token Information</h6>
      <div class="row">
                  <div class="col-md-6">
       <strong>Type:</strong> @selectedLog.TokenType<br/>
    <strong>Length:</strong> @selectedLog.TokenLength characters<br/>
            <strong>Client ID:</strong> @selectedLog.ClientId
       </div>
      <div class="col-md-6">
             <strong>Audience:</strong> @selectedLog.TokenAudience<br/>
         <strong>Expires:</strong> @(selectedLog.TokenExpiry?.ToString("yyyy-MM-dd HH:mm:ss UTC") ?? "Unknown")
         </div>
       </div>
<div class="mt-2">
    <strong>Token Preview:</strong><br/>
    <code class="text-break">@selectedLog.TokenPreview</code>
       </div>
       </div>
       }

             <div class="mb-3">
             <h6><i class="fas fa-arrow-up me-2"></i>Request Headers</h6>
    <pre class="small">@selectedLog.RequestHeaders</pre>
           </div>

            <div class="mb-3">
           <h6><i class="fas fa-arrow-down me-2"></i>Response Headers</h6>
        <pre class="small">@selectedLog.ResponseHeaders</pre>
</div>

           @if (!selectedLog.IsSuccess)
       {
       <div class="mb-3">
             <h6><i class="fas fa-exclamation-triangle me-2"></i>Error Information</h6>
   @if (!string.IsNullOrEmpty(selectedLog.Error))
         {
    <div class="alert alert-danger">
             <strong>Error:</strong> @selectedLog.Error
       </div>
        }
              @if (!string.IsNullOrEmpty(selectedLog.AuthError))
            {
     <div class="alert alert-warning">
          <strong>Auth Error:</strong> @selectedLog.AuthError
      </div>
              }
 </div>
         }
        </div>
        </div>
    </div>
        </div>
    }
</div>

@code {
    private List<ApiCallLog> logs = new();
    private bool isLoading = false;
    private bool autoRefresh = false;
    private ApiCallLog? selectedLog = null;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await RefreshLogs();
    }

    private async Task RefreshLogs()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
    logs = await CallLogService.GetRecentCallsAsync(100);
     Logger.LogDebug("Refreshed API call logs, found {Count} calls", logs.Count);
        }
  catch (Exception ex)
   {
    Logger.LogError(ex, "Error refreshing API call logs");
   }
        finally
        {
   isLoading = false;
 StateHasChanged();
 }
    }

    private async Task ClearLogs()
    {
        await CallLogService.ClearLogsAsync();
  logs.Clear();
        StateHasChanged();
        Logger.LogInformation("Cleared API call logs");
    }

    private void ToggleAutoRefresh()
    {
        autoRefresh = !autoRefresh;
        
     if (autoRefresh)
        {
         refreshTimer = new Timer(async _ => 
        {
      await InvokeAsync(async () =>
      {
           await RefreshLogs();
        });
            }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
        }
        else
     {
            refreshTimer?.Dispose();
   refreshTimer = null;
  }
        
    StateHasChanged();
    }

    private void ShowDetails(ApiCallLog log)
    {
     selectedLog = log;
  StateHasChanged();
 }

    private void CloseDetails()
    {
      selectedLog = null;
      StateHasChanged();
    }

    private string GetRowClass(ApiCallLog log)
    {
        if (!log.IsSuccess)
      return "table-danger";
        if (log.StatusCode >= 400)
   return "table-warning";
        return "";
    }

    private string GetMethodBadgeClass(string method) => method switch
    {
  "GET" => "bg-primary",
     "POST" => "bg-success",
        "PUT" => "bg-warning",
        "DELETE" => "bg-danger",
        "PATCH" => "bg-info",
        _ => "bg-secondary"
    };

    private string GetStatusBadgeClass(int statusCode) => statusCode switch
    {
        >= 200 and < 300 => "bg-success",
        >= 300 and < 400 => "bg-info",
        >= 400 and < 500 => "bg-warning",
 >= 500 => "bg-danger",
        _ => "bg-secondary"
    };

    public void Dispose()
  {
        refreshTimer?.Dispose();
}
}