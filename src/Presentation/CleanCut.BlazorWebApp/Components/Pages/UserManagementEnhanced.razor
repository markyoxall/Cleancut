@page "/users/management-enhanced"
@using CleanCut.Application.DTOs
@using CleanCut.BlazorWebApp.Components.Base
@using CleanCut.BlazorWebApp.State
@inherits StatefulComponent
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
 

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Enhanced User Management - CleanCut</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>
                <i class="fas fa-users text-primary"></i> Enhanced User Management
            </h2>
            <small class="text-muted">Powered by Advanced State Management</small>
        </div>
        <button type="button" class="btn btn-primary" @onclick="CreateUser" disabled="@IsLoading">
            <i class="fas fa-plus"></i> Add New User
        </button>
    </div>

    <!-- State Information Panel -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <h3>@UsersState.Users.Count</h3>
                    <small>Total Users</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <h3>@UsersState.Users.Count(u => u.IsActive)</h3>
                    <small>Active Users</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <h3>@(SelectedUserLocal?.FirstName ?? "None")</h3>
                    <small>Selected User</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <h3>@DateTime.Now.ToString("HH:mm:ss")</h3>
                    <small>Current Time</small>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert @(IsSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
            <i class="fas @(IsSuccess ? "fa-check-circle" : "fa-exclamation-circle")"></i> @Message
            <button type="button" class="btn-close" @onclick="ClearLocalMessage"></button>
        </div>
    }

    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border spinner-border-lg" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading users...</p>
        </div>
    }
    else
    {
        <!-- Users Table -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">Users (@UsersState.Users.Count)</h5>
                <div>
                    <button type="button" class="btn btn-outline-secondary btn-sm me-2" @onclick="RefreshUsers">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                    <button type="button" class="btn btn-outline-danger btn-sm" @onclick="ClearSelection">
                        <i class="fas fa-times"></i> Clear Selection
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                @if (UsersState.Users.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>User</th>
                                    <th>Email</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th width="200">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in UsersState.Users)
                                {
                                    <tr class="@(SelectedUserLocal?.Id == user.Id ? "table-info" : "")">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar-medium me-3">
                                                    @user.FirstName.Substring(0, 1).ToUpper()
                                                </div>
                                                <div>
                                                    <strong>@user.FirstName @user.LastName</strong>
                                                    <br>
                                                    <small class="text-muted">ID: @user.Id.ToString("N")[..8]</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <a href="mailto:@user.Email" class="text-decoration-none">@user.Email</a>
                                        </td>
                                        <td>
                                            @if (user.IsActive)
                                            {
                                                <span class="badge bg-success">
                                                    <i class="fas fa-check"></i> Active
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">
                                                    <i class="fas fa-times"></i> Inactive
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                @user.CreatedAt.ToString("MMM d, yyyy")
                                            </small>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group" aria-label="User actions">
                                                <button type="button" class="btn btn-outline-secondary" title="Select" 
                                                        @onclick="() => SelectUser(user)">
                                                    <i class="fas fa-hand-pointer"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-info" title="View Details" 
                                                        @onclick="() => ViewUser(user.Id)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-primary" title="Edit" 
                                                        @onclick="() => EditUser(user.Id)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-danger" title="Delete" 
                                                        @onclick="() => DeleteUser(user.Id)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-users fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No users found</h5>
                        <p class="text-muted">Get started by creating your first user</p>
                        <button type="button" class="btn btn-primary" @onclick="CreateUser">
                            <i class="fas fa-plus"></i> Add First User
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .avatar-medium {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #0d6efd;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 1.1rem;
    }

    .table-info {
        background-color: rgba(13, 110, 253, 0.1) !important;
    }
</style>

@code {
    private UserDto? SelectedUserLocal;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Enhanced User Management page loading");

        UsersState.UsersChanged += OnUsersChanged;

        // Check for refresh parameter
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.ContainsKey("refresh"))
        {
            SetLocalMessage("Operation completed successfully!", true);
        }

        // Load users using feature state
        await RefreshUsers();
    }

    private async Task RefreshUsers()
    {
        await ExecuteWithLoading(
            async () => await UsersState.LoadAsync(),
            "Users refreshed successfully"
        );
    }

    private void SelectUser(UserDto user)
    {
        SelectedUserLocal = user;
        SetLocalMessage($"Selected user: {user.FirstName} {user.LastName}", true);
    }

    private void ClearSelection()
    {
        SelectedUserLocal = null;
        SetLocalMessage("Selection cleared", true);
    }

    private async Task DeleteUser(Guid userId)
    {
        var user = UsersState.Users.FirstOrDefault(u => u.Id == userId);
        if (user == null) return;

        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user '{user.FirstName} {user.LastName}'?"))
        {
            await ExecuteWithLoading(
                async () => await UsersState.DeleteAsync(userId),
                null,
                "Failed to delete user"
            );
        }
    }

    private void CreateUser()
    {
        Logger.LogInformation("Navigating to create user page");
        Navigation.NavigateTo("/users/create");
    }

    private void ViewUser(Guid id)
    {
        Logger.LogInformation("Navigating to user details: {UserId}", id);
        Navigation.NavigateTo($"/users/details/{id}");
    }

    private void EditUser(Guid id)
    {
        Logger.LogInformation("Navigating to edit user: {UserId}", id);
        Navigation.NavigateTo($"/users/edit/{id}");
    }

    private void OnUsersChanged(List<UserDto> users)
    {
        Logger.LogInformation("Users changed event received: {UserCount} users", users.Count);
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnUsersChangedAsync(List<UserDto> users)
    {
        Logger.LogInformation("Users state updated: {UserCount} users loaded", users.Count);
        await Task.CompletedTask;
    }

    public override void Dispose()
    {
        UsersState.UsersChanged -= OnUsersChanged;
        base.Dispose();
    }
}