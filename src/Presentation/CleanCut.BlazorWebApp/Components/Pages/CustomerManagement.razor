@page "/customers/management"
@using CleanCut.Application.DTOs
@using CleanCut.BlazorWebApp.Services
@inject ILogger<CustomerManagement> Logger
@inject ICustomerApiService CustomerApi
@inject IProductApiService ProductApi
@inject NavigationManager Navigation
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Customer Management - CleanCut</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>
            <i class="fas fa-users text-primary"></i> Customer Management
        </h2>
        <button type="button" class="btn btn-primary" @onclick="CreateCustomer">
            <i class="fas fa-plus"></i> Add New Customer
        </button>
    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert @(IsSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
            <i class="fas @(IsSuccess ? "fa-check-circle" : "fa-exclamation-circle")"></i> @Message
            <button type="button" class="btn-close" @onclick="() => Message = string.Empty"></button>
        </div>
    }

    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading customers...</p>
        </div>
    }
    else
    {
        <!-- Customers Table -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">Customers (@Customers.Count)</h5>
            </div>
            <div class="card-body p-0">
                @if (Customers.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Customer</th>
                                    <th>Email</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th width="200">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var customer in Customers)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar-medium me-3">
                                                    @customer.FirstName.Substring(0, 1).ToUpper()
                                                </div>
                                                <div>
                                                    <strong>@customer.FirstName @customer.LastName</strong>
                                                    <br>
                                                    <small class="text-muted">ID: @customer.Id.ToString("N")[..8]</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <a href="mailto:@customer.Email" class="text-decoration-none">@customer.Email</a>
                                        </td>
                                        <td>
                                            @if (customer.IsActive)
                                            {
                                                <span class="badge bg-success">
                                                    <i class="fas fa-check"></i> Active
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">
                                                    <i class="fas fa-times"></i> Inactive
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                @customer.CreatedAt.ToString("MMM d, yyyy")
                                            </small>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group" aria-label="Customer actions">
                                                <button type="button" class="btn btn-outline-info" title="View Details" 
                                                        @onclick="() => ViewCustomer(customer.Id)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-primary" title="Edit" 
                                                        @onclick="() => EditCustomer(customer.Id)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-users fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No customers found</h5>
                        <p class="text-muted">Get started by creating your first customer</p>
                        <button type="button" class="btn btn-primary" @onclick="CreateCustomer">
                            <i class="fas fa-plus"></i> Add First Customer
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .avatar-medium {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #0d6efd;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 1.1rem;
    }
</style>

@code {
    private List<CustomerInfo> Customers { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private string? Message { get; set; }
    private bool IsSuccess { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Customer Management page loading");
        
        // Check for refresh parameter
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        
        if (query.ContainsKey("refresh"))
        {
            Logger.LogInformation("Refresh parameter detected, showing success message");
            Message = "Operation completed successfully!";
            IsSuccess = true;
        }
        
        await LoadCustomersAsync();
    }

    private async Task LoadCustomersAsync()
    {
        IsLoading = true;
        try
        {
            Customers = await CustomerApi.GetAllCustomersAsync();
            Logger.LogInformation("Loaded {CustomerCount} customers", Customers.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading customers");
            Message = "An error occurred while loading customers.";
            IsSuccess = false;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void CreateCustomer()
    {
        Logger.LogInformation("Navigating to create customer page");
        Navigation.NavigateTo("/customers/create");
    }

    private void ViewCustomer(Guid id)
    {
        Logger.LogInformation("Navigating to customer details: {CustomerId}", id);
        Navigation.NavigateTo($"/customers/details/{id}");
    }

    private void EditCustomer(Guid id)
    {
        Logger.LogInformation("Navigating to edit customer: {CustomerId}", id);
        Navigation.NavigateTo($"/customers/edit/{id}");
    }
}