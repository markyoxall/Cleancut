@page "/products/edit/{id:guid}"
@using CleanCut.Application.DTOs
@using CleanCut.BlazorWebApp.Services
@using System.ComponentModel.DataAnnotations
@inject ILogger<ProductEdit> Logger
@inject IProductApiService ProductApi
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: true))

<PageTitle>Edit Product - CleanCut</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>
            <i class="fas fa-edit text-primary"></i> Edit Product
        </h2>
        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
            <i class="fas fa-arrow-left"></i> Back to Products
        </button>
    </div>

    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border spinner-border-lg" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading product...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert @(IsSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
            <i class="fas @(IsSuccess ? "fa-check-circle" : "fa-exclamation-circle")"></i> @Message
            <button type="button" class="btn-close" @onclick="() => Message = string.Empty"></button>
        </div>
    }
    
    @if (Model != null && !IsLoading)
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-box me-2"></i>Product Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="name" class="form-label">Product Name <span class="text-danger">*</span></label>
                                        <InputText id="name" class="form-control" @bind-Value="Model.Name" placeholder="Enter product name" />
                                        <ValidationMessage For="@(() => Model.Name)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="price" class="form-label">Price <span class="text-danger">*</span></label>
                                        <InputNumber id="price" class="form-control" @bind-Value="Model.Price" placeholder="0.00" />
                                        <ValidationMessage For="@(() => Model.Price)" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label for="description" class="form-label">Description <span class="text-danger">*</span></label>
                                <InputTextArea id="description" class="form-control" @bind-Value="Model.Description" rows="4" placeholder="Enter product description" />
                                <ValidationMessage For="@(() => Model.Description)" class="text-danger" />
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                                <div>
                                    @if (OriginalProduct != null)
                                    {
                                        <button type="button" class="btn btn-outline-danger me-2" @onclick="() => ShowDeleteModal(OriginalProduct.Id, OriginalProduct.Name)">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    }
                                    <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                                        @if (IsSubmitting)
                                        {
                                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                        }
                                        <i class="fas fa-save"></i> Update Product
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                @if (OriginalProduct != null)
                {
                    <!-- Product Preview Card -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-eye me-2"></i>Current Details
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label text-muted small">Name</label>
                                <p class="fw-bold mb-1">@OriginalProduct.Name</p>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label text-muted small">Price</label>
                                <p class="fw-bold text-success mb-1">@OriginalProduct.Price.ToString("C")</p>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label text-muted small">Description</label>
                                <p class="small text-muted">@OriginalProduct.Description</p>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label text-muted small">Status</label>
                                <div>
                                    @if (OriginalProduct.IsAvailable)
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-check me-1"></i>Available
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">
                                            <i class="fas fa-times me-1"></i>Unavailable
                                        </span>
                                    }
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label text-muted small">Created</label>
                                <p class="small mb-0">@OriginalProduct.CreatedAt.ToString("MMM dd, yyyy")</p>
                            </div>

                            @if (OriginalProduct.UpdatedAt.HasValue)
                            {
                                <div class="mb-3">
                                    <label class="form-label text-muted small">Last Updated</label>
                                    <p class="small mb-0">@OriginalProduct.UpdatedAt.Value.ToString("MMM dd, yyyy")</p>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Owner Information -->
                    @if (OriginalProduct.User != null)
                    {
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">
                                    <i class="fas fa-user me-2"></i>Owner
                                </h5>
                            </div>
                            <div class="card-body text-center">
                                <div class="avatar-medium mx-auto mb-2">
                                    @OriginalProduct.User.FirstName.Substring(0, 1).ToUpper()
                                </div>
                                <h6 class="fw-bold mb-1">@OriginalProduct.User.FirstName @OriginalProduct.User.LastName</h6>
                                <p class="text-muted small mb-0">@OriginalProduct.User.Email</p>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (ShowingDeleteModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                        Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex align-items-start">
                        <i class="fas fa-trash fa-2x text-danger me-3 mt-1"></i>
                        <div>
                            <h6 class="mb-2">Are you sure you want to delete this product?</h6>
                            <p class="mb-2">
                                <strong>@ProductToDelete?.Name</strong>
                            </p>
                            <p class="text-muted small mb-0">
                                <i class="fas fa-exclamation-circle me-1"></i>
                                This action cannot be undone. The product will be permanently removed from the system.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteModal">
                        <i class="fas fa-times me-1"></i> Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@IsDeleting">
                        @if (IsDeleting)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            <span>Deleting...</span>
                        }
                        else
                        {
                            <i class="fas fa-trash me-1"></i>
                            <span>Delete Product</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Success Toast Notification -->
@if (ShowSuccessToast)
{
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
        <div class="toast show border-0 bg-success text-white" role="alert">
            <div class="toast-header bg-success text-white border-0">
                <i class="fas fa-check-circle me-2"></i>
                <strong class="me-auto">Success!</strong>
                <button type="button" class="btn-close btn-close-white" @onclick="HideSuccessToast"></button>
            </div>
            <div class="toast-body">
                <div class="d-flex align-items-center">
                    <i class="fas fa-trash me-2"></i>
                    <span>Product '@ToastMessage' has been deleted successfully!</span>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .avatar-medium {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background-color: #28a745;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 1.25rem;
    }

    .toast {
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        animation: slideInFromRight 0.3s ease-out;
    }

    /* Fix: Use CSS keyframes without Razor syntax conflicts */
    @@keyframes slideInFromRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>

@code {
    [Parameter] public Guid Id { get; set; }
    
    private ProductEditModel? Model { get; set; }
    private ProductDto? OriginalProduct { get; set; }
    private bool IsLoading { get; set; } = true;
    private bool IsSubmitting { get; set; }
    private string? Message { get; set; }
    private bool IsSuccess { get; set; }

    // Delete modal state
    private bool ShowingDeleteModal { get; set; }
    private bool IsDeleting { get; set; }
    private ProductDto? ProductToDelete { get; set; }

    // Toast notification state
    private bool ShowSuccessToast { get; set; }
    private string ToastMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Product Edit page loading for ID: {ProductId}", Id);
        await LoadProductAsync();
    }

    private async Task LoadProductAsync()
    {
        IsLoading = true;
        try
        {
            OriginalProduct = await ProductApi.GetProductByIdAsync(Id);
            
            if (OriginalProduct == null)
            {
                Message = "Product not found.";
                Logger.LogWarning("Product with ID {ProductId} not found", Id);
                return;
            }

            // Initialize the edit model with current product data
            Model = new ProductEditModel
            {
                Id = OriginalProduct.Id,
                Name = OriginalProduct.Name,
                Description = OriginalProduct.Description,
                Price = OriginalProduct.Price
            };

            Logger.LogInformation("Loaded product for editing: @OriginalProduct.Name", OriginalProduct.Name);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading product {ProductId} for editing", Id);
            Message = "An error occurred while loading the product.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Model == null) return;

        IsSubmitting = true;
        try
        {
            Logger.LogInformation("Updating product: {ProductName} (ID: {ProductId})", Model.Name, Model.Id);

            var request = new UpdateProductRequest
            {
                Name = Model.Name,
                Description = Model.Description,
                Price = Model.Price
            };

            var updatedProduct = await ProductApi.UpdateProductAsync(Model.Id, request);

            Logger.LogInformation("Product updated successfully: {ProductId}", updatedProduct.Id);

            // Navigate back to management page with success message and filter to current user
            var userId = OriginalProduct?.UserId ?? Guid.Empty;
            Navigation.NavigateTo($"/products/management?userId={userId}&refresh={DateTime.UtcNow.Ticks}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating product {ProductName} (ID: {ProductId})", Model.Name, Model.Id);
            Message = "An error occurred while updating the product. Please try again.";
            IsSuccess = false;
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Logger.LogInformation("Product edit cancelled");
        Navigation.NavigateTo("/products/management");
    }

    // Delete modal methods
    private void ShowDeleteModal(Guid productId, string productName)
    {
        ProductToDelete = OriginalProduct;
        ShowingDeleteModal = true;
        Logger.LogInformation("Showing delete confirmation for product: {ProductName} (ID: {ProductId})", productName, productId);
        StateHasChanged();
    }

    private void HideDeleteModal()
    {
        ShowingDeleteModal = false;
        ProductToDelete = null;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (ProductToDelete == null) return;

        IsDeleting = true;
        try
        {
            Logger.LogInformation("Deleting product: {ProductName} (ID: {ProductId})", ProductToDelete.Name, ProductToDelete.Id);
            
            var success = await ProductApi.DeleteProductAsync(ProductToDelete.Id);
            
            if (success)
            {
                Logger.LogInformation("Product deleted successfully: {ProductId}", ProductToDelete.Id);
                
                // Show success toast
                ToastMessage = ProductToDelete.Name;
                ShowSuccessToast = true;
                StateHasChanged();
                
                // Auto-hide toast and navigate after delay
                _ = Task.Run(async () =>
                {
                    await Task.Delay(5000); // Show toast for 5 seconds (increased from 3)
                    await InvokeAsync(() =>
                    {
                        ShowSuccessToast = false;
                        StateHasChanged();
                    });
                    
                    await Task.Delay(500); // Small delay after toast disappears
                    await InvokeAsync(() =>
                    {
                        Navigation.NavigateTo($"/products/management?refresh={DateTime.UtcNow.Ticks}");
                    });
                });
            }
            else
            {
                // Product not found on server - API returned false
                Logger.LogWarning("Product {ProductId} not found on server during delete", ProductToDelete.Id);
                Message = $"Product '{ProductToDelete.Name}' was not found on the server. It may have already been deleted by another user.";
                IsSuccess = false;
            }
        }
        catch (HttpRequestException httpEx) when (httpEx.Message.Contains("404"))
        {
            Logger.LogWarning(httpEx, "Product {ProductId} returned 404 during delete", ProductToDelete.Id);
            Message = $"Product '{ProductToDelete.Name}' was not found on the server. It may have already been deleted.";
            IsSuccess = false;
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogError(httpEx, "HTTP error deleting product {ProductId}", ProductToDelete.Id);
            Message = $"Network error while deleting '{ProductToDelete.Name}'. Please check your connection and try again.";
            IsSuccess = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error deleting product {ProductId}", ProductToDelete.Id);
            Message = $"An unexpected error occurred while deleting '{ProductToDelete.Name}'. Please try again.";
            IsSuccess = false;
        }
        finally
        {
            IsDeleting = false;
            HideDeleteModal();
            StateHasChanged();
        }
    }

    private void HideSuccessToast()
    {
        ShowSuccessToast = false;
        StateHasChanged();
    }

    // Form model class for editing
    public class ProductEditModel
    {
        public Guid Id { get; set; }

        [Required(ErrorMessage = "Product name is required")]
        [StringLength(100, ErrorMessage = "Product name cannot exceed 100 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Description is required")]
        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Price is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than 0")]
        public decimal Price { get; set; }
    }
}