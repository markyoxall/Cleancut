@page "/products/details/{id:guid}"
@using CleanCut.Application.DTOs
@using CleanCut.BlazorWebApp.Services
@inject ILogger<ProductDetails> Logger
@inject IProductApiService ProductApi
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: true))

<PageTitle>Product Details - CleanCut</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>
            <i class="fas fa-eye text-info"></i> Product Details
        </h2>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary" @onclick="BackToProducts">
                <i class="fas fa-arrow-left"></i> Back to Products
            </button>
            @if (Product != null)
            {
                <button type="button" class="btn btn-outline-primary" @onclick="() => EditProduct(Product.Id)">
                    <i class="fas fa-edit"></i> Edit Product
                </button>
            }
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert @(IsSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
            <i class="fas @(IsSuccess ? "fa-check-circle" : "fa-exclamation-circle")"></i> @Message
            <button type="button" class="btn-close" @onclick="() => Message = string.Empty"></button>
        </div>
    }

    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border spinner-border-lg" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading product details...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(Message) && Product == null)
    {
        <div class="text-center py-5">
            <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
            <h4>Product Not Found</h4>
            <p class="text-muted">The product you're looking for could not be found.</p>
            <button type="button" class="btn btn-primary" @onclick="BackToProducts">
                <i class="fas fa-arrow-left me-2"></i>Back to Products
            </button>
        </div>
    }
    else if (Product != null)
    {
        <div class="row">
            <div class="col-lg-8">
                <!-- Product Information Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-box me-2"></i>Product Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label text-muted">Product Name</label>
                                    <p class="fw-bold fs-5">@Product.Name</p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label text-muted">Price</label>
                                    <p class="fw-bold fs-4 text-success">@Product.Price.ToString("C")</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label text-muted">Description</label>
                            <p class="border rounded p-3 bg-light">@Product.Description</p>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label text-muted">Status</label>
                                    <div>
                                        @if (Product.IsAvailable)
                                        {
                                            <span class="badge bg-success fs-6">
                                                <i class="fas fa-check me-1"></i>Available
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning fs-6">
                                                <i class="fas fa-times me-1"></i>Unavailable
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label text-muted">Created Date</label>
                                    <p class="fw-semibold">@Product.CreatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")</p>
                                </div>
                            </div>
                        </div>

                        @if (Product.UpdatedAt.HasValue)
                        {
                            <div class="mb-3">
                                <label class="form-label text-muted">Last Updated</label>
                                <p class="fw-semibold">@Product.UpdatedAt.Value.ToString("MMMM dd, yyyy 'at' h:mm tt")</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <!-- Owner Information Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-Customer me-2"></i>Owner Information
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (Product.Customer != null)
                        {
                            <div class="text-center mb-3">
                                <div class="avatar-large mx-auto mb-3">
                                    @Product.Customer.FirstName.Substring(0, 1).ToUpper()
                                </div>
                                <h6 class="fw-bold">@Product.Customer.FirstName @Product.Customer.LastName</h6>
                                <p class="text-muted">@Product.Customer.Email</p>
                            </div>
                            
                            <div class="border-top pt-3">
                                <div class="mb-2">
                                    <label class="form-label text-muted small">Status</label>
                                    <div>
                                        @if (Product.Customer.IsActive)
                                        {
                                            <span class="badge bg-success">
                                                <i class="fas fa-check me-1"></i>Active
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">
                                                <i class="fas fa-times me-1"></i>Inactive
                                            </span>
                                        }
                                    </div>
                                </div>
                                
                                @if (Product.Customer.CreatedAt != default)
                                {
                                    <div class="mb-2">
                                        <label class="form-label text-muted small">Member Since</label>
                                        <p class="small mb-0">@Product.Customer.CreatedAt.ToString("MMMM yyyy")</p>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted">
                                <i class="fas fa-Customer-slash fa-2x mb-2"></i>
                                <p>Owner information not available</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Actions Card -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-cogs me-2"></i>Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-primary" @onclick="() => EditProduct(Product.Id)">
                                <i class="fas fa-edit me-2"></i>Edit Product
                            </button>
                            <button type="button" class="btn btn-outline-danger" @onclick="() => ShowDeleteModal(Product.Id, Product.Name)">
                                <i class="fas fa-trash me-2"></i>Delete Product
                            </button>
                            <hr class="my-2">
                            <button type="button" class="btn btn-outline-secondary" @onclick="BackToProducts">
                                <i class="fas fa-list me-2"></i>Back to Products
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (ShowingDeleteModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                        Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex align-items-start">
                        <i class="fas fa-trash fa-2x text-danger me-3 mt-1"></i>
                        <div>
                            <h6 class="mb-2">Are you sure you want to delete this product?</h6>
                            <p class="mb-2">
                                <strong>@ProductToDelete?.Name</strong>
                            </p>
                            <p class="text-muted small mb-0">
                                <i class="fas fa-exclamation-circle me-1"></i>
                                This action cannot be undone. The product will be permanently removed from the system.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteModal">
                        <i class="fas fa-times me-1"></i> Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@IsDeleting">
                        @if (IsDeleting)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            <span>Deleting...</span>
                        }
                        else
                        {
                            <i class="fas fa-trash me-1"></i>
                            <span>Delete Product</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .avatar-large {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background-color: #28a745;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 2rem;
    }
</style>

@code {
    [Parameter] public Guid Id { get; set; }
    
    private ProductInfo? Product { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? Message { get; set; }
    private bool IsSuccess { get; set; }

    // Delete modal state
    private bool ShowingDeleteModal { get; set; }
    private bool IsDeleting { get; set; }
    private ProductInfo? ProductToDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Product Details page loading for ID: {ProductId}", Id);
        await LoadProductAsync();
    }

    private async Task LoadProductAsync()
    {
        IsLoading = true;
        try
        {
            Product = await ProductApi.GetProductByIdAsync(Id);
            
            if (Product == null)
            {
                Message = "Product not found.";
                Logger.LogWarning("Product with ID {ProductId} not found", Id);
            }
            else
            {
                Logger.LogInformation("Loaded product: {ProductName}", Product.Name);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading product {ProductId}", Id);
            Message = "An error occurred while loading the product details.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void BackToProducts()
    {
        Logger.LogInformation("Navigating back to product management");
        Navigation.NavigateTo("/products/management");
    }

    private void EditProduct(Guid productId)
    {
        Logger.LogInformation("Navigating to edit product: {ProductId}", productId);
        Navigation.NavigateTo($"/products/edit/{productId}");
    }

    // Delete modal methods
    private void ShowDeleteModal(Guid productId, string productName)
    {
        ProductToDelete = Product;
        ShowingDeleteModal = true;
        Logger.LogInformation("Showing delete confirmation for product: {ProductName} (ID: {ProductId})", productName, productId);
        StateHasChanged();
    }

    private void HideDeleteModal()
    {
        ShowingDeleteModal = false;
        ProductToDelete = null;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (ProductToDelete == null) return;

        IsDeleting = true;
        try
        {
            Logger.LogInformation("Deleting product: {ProductName} (ID: {ProductId})", ProductToDelete.Name, ProductToDelete.Id);
            
            var success = await ProductApi.DeleteProductAsync(ProductToDelete.Id);
            
            if (success)
            {
                Logger.LogInformation("Product deleted successfully: {ProductId}", ProductToDelete.Id);
                
                // Navigate back to management page with success message
                Navigation.NavigateTo($"/products/management?refresh={DateTime.UtcNow.Ticks}");
            }
            else
            {
                Logger.LogWarning("Product {ProductId} not found on server during delete", ProductToDelete.Id);
                Message = $"Product '{ProductToDelete.Name}' could not be deleted. It may have already been removed.";
                IsSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting product {ProductId}", ProductToDelete.Id);
            Message = $"An error occurred while deleting '{ProductToDelete.Name}'. Please try again.";
            IsSuccess = false;
        }
        finally
        {
            IsDeleting = false;
            HideDeleteModal();
            StateHasChanged();
        }
    }
}